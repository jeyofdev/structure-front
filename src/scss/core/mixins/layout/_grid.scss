/// set the css properties of the grid system
///
/// @param $size {number} number of columns used
/// @param $columns {number} total number of columns
/// @param $paddingColumns total value of padding left and right
@mixin make-grid-columns($columns: $grid-columns, $paddingColumns: $grid-gutter-width, $breakpoints: $gridBreakpoints) {
  @include common-cols();

  @each $key, $value in $breakpoints {
    @if $key == "xs" {
      $key: null;
    }

    @else {
      $key: -#{$key};
    }

    // Allow columns to stretch full width below their breakpoints
    @for $i from 1 through $columns {
      .col#{$key}-#{$i} {
        @extend %grid-column;
      }
    }

    .col#{$key},
    .col#{$key}-auto {
      @extend %grid-column;
    }
  }

  @each $key, $value in $breakpoints {
    @include media-queries-up($key) {
      // .col-{breakpoint}
      .col-#{$key} {
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
      }

      // .col-{breakpoint}-auto
      .col-#{$key}-auto {
        flex: 0 0 auto;
        width: auto;
        max-width: 100%;
      }

      // .col-{breakpoint}-{number}
      @for $i from 1 through $columns {
        .col-#{$key}-#{$i} {
          @include column($i, $columns);
        }
      }

      // .order-{breakpoint}...
      .order-#{$key}-first { order: -1; }
      .order-#{$key}-last { order: $columns + 1; }

      @for $i from 0 through $columns {
        .order-#{$key}-#{$i} { order: $i; }
      }

      // .offset-{breakpoint}-{number}
      @for $i from 0 through ($columns - 1) {
        @if not ($key == "" and $i == 0) {
          .offset-#{$key}-#{$i} {
            @include column-offset($i, $columns);
          }
        }
      }
    }
  }
}

/// set the common css properties of the grid columns for each breakpoints
///
/// @param $paddingColumns total value of padding left and right
@mixin common-cols($paddingColumns: $grid-gutter-width) {
  %grid-column {
    position: relative;
    width: 100%;
    padding-right: $paddingColumns / 2;
    padding-left: $paddingColumns / 2;
  }
}

/// set the css properties of the grid columns
///
/// @param $size {number} number of columns used
/// @param $columns {number} total number of columns
/// @param $paddingColumns total value of padding left and right
@mixin column($size, $columns: $grid-columns, $paddingColumns: $grid-gutter-width) {
  $num: $size / $columns;

  flex: 0 0 percentage($num);
  max-width: calc(#{percentage($num)} - #{$paddingColumns});
}

/// set the css properties of the offset grid columns
///
/// @param $size {number} number of columns used
/// @param $columns {number} total number of columns
@mixin column-offset($size, $columns: $grid-columns) {
  $num: $size / $columns;

  margin-left: if($num == 0, 0, percentage($num));
}

